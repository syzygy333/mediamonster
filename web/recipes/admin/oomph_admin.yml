# A human-readable name of the Recipe for listing in UIs.
name: 'Oomph Admin'
description: "Tools for a consistent admin experience"
# The type key is similar to the package key in module.info.yml. It
# can be used by the UI to group Drupal recipes. Additionally,
# the type 'Site' means that the Drupal recipe will be listed in
# the installer.
type: 'Oomph Admin'

recipe:
  # An array of recipes to apply prior to applying this recipe. If any of these
  # recipes fail to be applied, this recipe will not be applied either.
  # - editorial_ui_for_publishers
  # - another_recipe

install:
  # An array of modules or themes to install, if they are not already.
  # The system will detect if it is a theme or a module. During the
  # install only simple configuration from the new modules is created.
  # This allows the Drupal recipe control over the configuration.
  - admin_toolbar
  - admin_toolbar_tools
  - coffee
  - gin
  - gin_login

config:
  # A Drupal recipe can have a config directory. All configuration
  # is this directory will be imported after the modules have been
  # installed.

  # Additionally, the Drupal recipe can install configuration entities
  # provided by the modules it configures. This allows them to not have
  # to maintain or copy this configuration. Note the examples below are
  # fictitious.
  import:
    admin_toolbar: *
    coffee: *
    # Import all configuration that is provided by the text module and any
    # optional configuration that depends on the text module that is provided by
    # modules already installed.
    # text: *

  # Configuration actions may be defined. The structure here should be
  # configuration entity ID, action, and then action arguments. Below the user
  # role entity type with an ID of editor is being created if it does not exist
  # and then has permissions added. The permissions key will be mapped to the
  # \Drupal\user\Entity\Role::grantPermission() method.
  # actions:
  #   user.role.editor:
  #     ensure_exists:
  #       label: 'Editor'
  #     grantPermissions:
  #       - 'delete any article content'
  #       - 'edit any article content'

content:
# A Drupal recipe can have a content directory. All content in this
# directory will be created after the configuration is installed.
